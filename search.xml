<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用 10 分鐘建置 Windows 全端、深度學習的開發環境</title>
      <link href="/2019/10/04/workspace-setup/"/>
      <url>/2019/10/04/workspace-setup/</url>
      
        <content type="html"><![CDATA[<p>身為一位健忘的青年，為自己做筆記是十分合情合理的哈哈~</p><h2 id="預計安裝的套件組合"><a href="#預計安裝的套件組合" class="headerlink" title="預計安裝的套件組合"></a>預計安裝的套件組合</h2><p>我大多是使用 Javascript 與 Python 進行開發、資料庫使用 MongoDB、用 kubernetes 管理服務節點、TensorFlow 2.0 訓練學習模型…</p><ul><li>作業系統 &amp; 終端 Shell<ul><li>Windows 10 Pro</li><li>WSL Ubuntu</li><li>zsh</li></ul></li><li>編輯器<ul><li>Visual Studio Code</li></ul></li><li>運行環境<ul><li>Node.js</li><li>Python</li></ul></li><li>容器化管理<ul><li>Docker</li></ul></li><li>提升效率的軟體<ul><li>Wox</li><li>MongoDB Compass</li></ul></li></ul><h2 id="作業系統-amp-終端-Shell"><a href="#作業系統-amp-終端-Shell" class="headerlink" title="作業系統 &amp; 終端 Shell"></a>作業系統 &amp; 終端 Shell</h2><p>Windows 10 專業版可於<a href="https://www.microsoft.com/zh-tw/p/windows-10-%E5%B0%88%E6%A5%AD%E7%89%88/df77x4d43rkt?activetab=pivot%3aoverviewtab" target="_blank" rel="noopener">微軟官網</a>購買，便可使用 MicroSoft 與 Canonical 匠心打造的 WSL，讓我們可以使用 Bash 直接操作系統~</p><p>以系統管理員身分開啟 PowerShell 主控台 (對 ‘開始’ 圖標右鍵 &gt; PowerShell 系統管理員)，輸入以下指令</p><pre><code class="Powershell">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</code></pre><p>接下來到 <a href="ms-windows-store://search/?query=ubuntu" target="_blank" rel="noopener">Windows 市集尋找 Ubuntu</a> 選擇版本並安裝，過程中會問一些問題，依照需求回答即可，例如使用者帳號密碼之類的，執行檔位置會在 <code>C:\\WINDOWS\\System32\\wsl.exe</code> 之後編輯器的設定會用到，接下來對原生 Bash 進行一些加強，個人的習慣是使用 zsh，因為有很多方便的<a href="https://github.com/ohmyzsh/ohmyzsh" target="_blank" rel="noopener">插件</a>可以免費使用</p><p><img src="zsh-preview.png" alt="zsh可以自行設定樣式、版本控制、自動補全等功能"></p><p>先開啟 WSL 並更新它，要記得一段時間就要更新</p><pre><code class="bash"># 更新 WSL$ sudo apt update &amp;&amp; sudo apt upgrade# 安裝 zsh$ sudo apt-get install zsh$ which zsh/usr/bin/zsh# 設定 WSL 預設 Shell$ chsh -s /usr/bin/zsh# 確認目前使用 Shell$ echo $SHELL</code></pre><p>重開 WSL 之後，已經換成 zsh 了，接下來換個樣式再裝個插件即可，你可以看看<a href="https://zshthem.es/all/" target="_blank" rel="noopener">樣式列表</a>挑選喜歡的樣式，看看<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins" target="_blank" rel="noopener">插件列表</a>有沒有符合需求的功能</p><pre><code class="bash"># 安裝 materialshell$ curl -L -o ~/.oh-my-zsh/custom/themes/materialshell.zsh-theme https://raw.githubusercontent.com/carloscuesta/materialshell/master/materialshell.zsh# 安裝 指令補齊功能$ git clone https://github.com/zsh-users/zsh-completions ~/.oh-my-zsh/custom/plugins/zsh-completions# 安裝 指令建議功能$ git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions# 安裝 語法 highlight 功能$ git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting</code></pre><p>安裝完成後要設定 zsh，設定檔位置在 <code>~/.zshrc</code>，目前變更 ZSH_THEME 與 plugins 即可，</p><pre><code class="bash">ZSH_THEME=&quot;materialshell&quot;plugins=(git docker docker-compose zsh-completions zsh-autosuggestions zsh-syntax-highlighting)</code></pre><h2 id="編輯器"><a href="#編輯器" class="headerlink" title="編輯器"></a>編輯器</h2><p>我使用 Vim 開發軟體好多年了，因為我一直不知道怎麼離開編輯模式XD，中途用過 <a href="https://www.sublimetext.com/" target="_blank" rel="noopener">Sublime text</a>、<a href="https://www.jetbrains.com/phpstorm/" target="_blank" rel="noopener">Phpstorm</a>、<a href="https://atom.io/" target="_blank" rel="noopener">Atom</a>，目前最順手的還是微軟的 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VS Code</a>，主要原因是我不需要 IDE 我喜歡自己搭建執行跟測試環境，以下是我的幾個設定</p><p><code>extensions</code>：由 Ctrl + Shift + X 進入市集 安裝 (點選圖片可以放大)</p><img src="VSCODE_extension_1.png" class="w-half-imgWrapper" /><img src="VSCODE_extension_2.png" class="w-half-imgWrapper" /><img src="VSCODE_extension_3.png" class="w-half-imgWrapper" /><img src="VSCODE_extension_4.png" class="w-half-imgWrapper" /><img src="VSCODE_extension_5.png" class="w-full-imgWrapper" /><p><code>settings (JSON)</code>：由 Ctrl + Shift + P 輸入 &gt;settings (JSON) 進入</p><pre><code class="bash">{    &quot;workbench.colorTheme&quot;: &quot;Atom One Dark&quot;,    &quot;atomKeymap.promptV3Features&quot;: true,    &quot;editor.multiCursorModifier&quot;: &quot;ctrlCmd&quot;,    &quot;editor.formatOnPaste&quot;: true,    &quot;workbench.iconTheme&quot;: &quot;material-icon-theme&quot;,    &quot;files.autoSave&quot;: &quot;onFocusChange&quot;,    &quot;editor.fontSize&quot;: 16,    &quot;editor.tabSize&quot;: 2,    &quot;editor.fontFamily&quot;: &quot;&#39;Source Code Pro&#39;, Consolas, &#39;Courier New&#39;, monospace&quot;,    &quot;debug.console.fontSize&quot;: 16,    &quot;debug.console.fontFamily&quot;: &quot;&#39;Source Code Pro&#39;&quot;,    &quot;markdown.preview.fontSize&quot;: 16,    &quot;terminal.integrated.fontSize&quot;: 16,    &quot;git.enableSmartCommit&quot;: true,    &quot;eslint.autoFixOnSave&quot;: true,    &quot;terminal.integrated.shell.windows&quot;: &quot;C:\\WINDOWS\\System32\\wsl.exe&quot;,    &quot;files.associations&quot;: {        &quot;*.js&quot;: &quot;javascriptreact&quot;    },    &quot;javascript.updateImportsOnFileMove.enabled&quot;: &quot;always&quot;,    &quot;workbench.colorCustomizations&quot;: {        &quot;terminal.ansiYellow&quot;: &quot;#f1eb92c5&quot;    },    &quot;explorer.confirmDragAndDrop&quot;: false,    &quot;editor.formatOnType&quot;: true,    &quot;extensions.ignoreRecommendations&quot;: false,    &quot;emmet.triggerExpansionOnTab&quot;: true,    &quot;terminal.integrated.rendererType&quot;: &quot;dom&quot;,}</code></pre><p>額外步驟，在開發 JS 的時候常常需要透過 <code>console.log</code> 除錯，設定一個快捷鍵 <code>Ctrl + Shift + C</code> 快速輸入增加效率</p><p><code>shortcuts (JSON)</code>：由 Ctrl + Shift + P 輸入 &gt;shortcuts (JSON) 進入</p><pre><code class="bash">[  {    &quot;key&quot;: &quot;ctrl+shift+a&quot;,    &quot;command&quot;: &quot;editor.action.blockComment&quot;,    &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot;  },  {    &quot;key&quot;: &quot;shift+alt+a&quot;,    &quot;command&quot;: &quot;-editor.action.blockComment&quot;,    &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot;  },  {    &quot;key&quot;: &quot;ctrl+shift+c&quot;,    &quot;command&quot;: &quot;editor.action.insertSnippet&quot;,    &quot;when&quot;: &quot;editorTextFocus&quot;,    &quot;args&quot;: {      &quot;snippet&quot;: &quot;console.log(&#39;${TM_SELECTED_TEXT}, &#39;, ${TM_SELECTED_TEXT});&quot;    }  },  {    &quot;key&quot;: &quot;ctrl+alt+t&quot;,    &quot;command&quot;: &quot;workbench.action.terminal.focusNext&quot;  },  {    &quot;key&quot;: &quot;ctrl+shift+down&quot;,    &quot;command&quot;: &quot;-cursorDownSelect&quot;,    &quot;when&quot;: &quot;textInputFocus&quot;  },  {    &quot;key&quot;: &quot;ctrl+shift+up&quot;,    &quot;command&quot;: &quot;-cursorUpSelect&quot;,    &quot;when&quot;: &quot;textInputFocus&quot;  },  {    &quot;key&quot;: &quot;ctrl+shift+down&quot;,    &quot;command&quot;: &quot;editor.action.copyLinesDownAction&quot;,    &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot;  },  {    &quot;key&quot;: &quot;shift+alt+down&quot;,    &quot;command&quot;: &quot;-editor.action.copyLinesDownAction&quot;,    &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot;  },  {    &quot;key&quot;: &quot;ctrl+shift+up&quot;,    &quot;command&quot;: &quot;editor.action.copyLinesUpAction&quot;,    &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot;  },  {    &quot;key&quot;: &quot;shift+alt+up&quot;,    &quot;command&quot;: &quot;-editor.action.copyLinesUpAction&quot;,    &quot;when&quot;: &quot;editorTextFocus &amp;&amp; !editorReadonly&quot;  }]</code></pre><p>WSL 內的 Vim 時常會用，簡單的配置一下吧</p><pre><code class="bash">$ vim ~/.vimrc...set t_Co=256set numberset smartcaseset hlsearchsyntax enableset smartindentset tabstop=2set shiftwidth=2set expandtab...</code></pre><p><img src="vscode-preview.png" alt="VS Code 開發、測試的畫面"></p><h2 id="運行環境"><a href="#運行環境" class="headerlink" title="運行環境"></a>運行環境</h2><p>我的執行環境非常單純，只有 <code>Node.js</code> 跟 <code>Python</code>，如果沒有需要同時安裝不同版本的需求，可以跳過了~</p><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>透過 <a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">nvm</a> 我們可以隨時切換 Node.js 版本，當安裝太多不必要的套件時也可以直接清除環境，推薦安裝</p><pre><code class="bash"># 安裝 nvm$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash# 或$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash# 重整環境$ exec $SHELL# 列出可安裝版本$ nvm ls-remote# 安裝對應版本$ nvm install 10.10.0# 設定環境預設版本$ nvm alias default 10.10.0# 更多指令$ nvm --help# 檢查 Node.js 環境$ node -vv10.16.3$ npm -v6.9.0</code></pre><p>安裝完 nvm 後會發現 WSL 開啟速度明顯變慢，這是由於每次開啟新的 session 時 nvm 都會檢查所有版本的資料夾，這個<a href="https://github.com/nvm-sh/nvm/issues/1493" target="_blank" rel="noopener">問題</a>可以透過設定固定版本解決，而我個人是透過延遲載入的方式解決這個問題：session 開啟時不會執行 nvm 直到我輸入關鍵字才會載入環境，通過設定 <code>~/.zshrc</code> 即可</p><pre><code class="bash">$ vim ~/.zshrc...# 註解掉原本的 nvm 引入#export NVM_DIR=&quot;$HOME/.nvm&quot;#[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm#[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion# 增加延遲載入函數lazy_load() {  echo &quot;Lazy loading nvm with $3 ...&quot;  local -a names  if [[ -n &quot;$ZSH_VERSION&quot; ]]; then    names=(&quot;${(@s: :)${1}}&quot;)  else    names=($1)  fi  unalias &quot;${names[@]}&quot;  . $2  shift 2  $*}group_lazy_load() {  local script  script=$1  shift 1  for cmd in &quot;$@&quot;; do    alias $cmd=&quot;lazy_load \&quot;$*\&quot; $script $cmd&quot;  done}# 引入延遲載入函數(請自行設定關鍵字)export NVM_DIR=&quot;$HOME/.nvm&quot;group_lazy_load $HOME/.nvm/nvm.sh nvm node npm npx yarn pm2unset -f group_lazy_load...</code></pre><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>Python 是一種跨平台的腳本語言，Python 的強大之處在於它的應用領域之廣，遍及人工智慧、科學計算、資料分析、大數據、雲端運算。實現其強大功能的前提，就是 Python 具有數量龐大且功能相對完善的標準庫和第三方庫。通過對庫的引用，能夠實現對不同領域業務的開發。然而，正是由於庫的數量龐大，對於管理這些庫以及對庫作及時的維護成為既重要但複雜度又高的事情，因此我們需要 <a href="https://www.anaconda.com/" target="_blank" rel="noopener">Anaconda</a> 幫助管理函式庫，就像 Node.js 需要 NPM 一樣</p><p>Anaconda、conda、pip 的區別</p><ul><li>Anaconda：包含180+的科學套件及其依賴套件的發行版本。其包含的科學套件包括：conda, numpy, scipy, ipython notebook…</li><li>conda：套件和運行環境的管理工具，作用是快速安裝、運行和升級其依賴套件，另外可以更便捷地新增、儲存、載入和切換運行環境</li><li>pip：用於安裝和管理函式庫的管理器</li></ul><p>我不需要圖形化介面，所以這邊我安裝 3.6 精簡版</p><pre><code class="bash">$ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh$ ./Miniconda3-latest-Linux-x86_64.sh# 把 conda 加入系統路徑中$ vim ~/.zshrc...# 如果有類似的腳本則無需加入# &gt;&gt;&gt; conda initialize &gt;&gt;&gt;# !! Contents within this block are managed by &#39;conda init&#39; !!__conda_setup=&quot;$(&#39;/home/{YOUR_NAME}/miniconda3/bin/conda&#39; &#39;shell.bash&#39; &#39;hook&#39; 2&gt; /dev/null)&quot;if [ $? -eq 0 ]; then  eval &quot;$__conda_setup&quot;else  if [ -f &quot;/home/{YOUR_NAME}/miniconda3/etc/profile.d/conda.sh&quot; ]; then    . &quot;/home/{YOUR_NAME}/miniconda3/etc/profile.d/conda.sh&quot;  else    export PATH=&quot;/home/{YOUR_NAME}/miniconda3/bin:$PATH&quot;  fifiunset __conda_setup...# 更新設定檔$ source ~/.zshrc$ conda -Vconda 4.7.x# 查看安裝套件列表$ conda list</code></pre><p>安裝完後就可以自由創建不同的 Python 運行環境了~<br /><br>環境設定完成後接著安裝 <a href="https://github.com/jupyterlab/jupyterlab" target="_blank" rel="noopener">Jupyter Lab</a>，可以直觀的看到資料的走向，更方便的除錯等等…</p><pre><code class="bash"># 更新 conda$ conda update conda# 啟用 基本組合$ conda activate# 新增 im2text 版本是 2.7 的環境$ conda create --name im2text python=2.7# 列出所有虛擬環境$ conda env list# 安裝 Jupyter Lab$ conda install -c conda-forge jupyterlab# 開啟 Jupyter Lab$ jupyter lab</code></pre><p><img src="jupyter-lab-preview.png" alt="Jupyter Lab 搭建 Resnet，輕鬆又愜意~"></p><h2 id="版本控制工具"><a href="#版本控制工具" class="headerlink" title="版本控制工具"></a>版本控制工具</h2><p>所有的軟體或服務都是架構在快速開發、快速推出、並依市場反應快速修改，所有版本的控制十分重要，學會 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> 這個版本控制界的老大還是非常重要滴，不需要特別安裝 WSL 預設就有了~</p><pre><code class="bash"># 基本設定$ git config --global user.name [Your_Name]$ git config --global user.email [Your_Email]</code></pre><h2 id="容器化管理"><a href="#容器化管理" class="headerlink" title="容器化管理"></a>容器化管理</h2><p>有過開發微服務經驗的人都知道同一份程式碼在不同環境裡就會有不同的結果(T_T)，所以把統一整個環境是個既安全又聰明的選擇，因此早早學會容器化管理、強身又健體</p><p><a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a> 是開放原始碼的專案，將程式自動化部署為可攜式且可自足的容器，在雲端或內部部署上執行。不同於大部分的應用程式， Docker 是一個系統層面的應用程式，這代表 Docker 需要更加底層的系統存取權限，因此我們需要開啟 Windows Hyper-V 賦予 Docker 操作權限</p><p>以系統管理員身分開啟 PowerShell 主控台 (對 ‘開始’ 圖標右鍵 &gt; PowerShell 系統管理員)，輸入以下指令</p><pre><code class="powershell">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All</code></pre><p>接著到<a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows?source=post_page-----e722e87ffa3b----------------------" target="_blank" rel="noopener">官網</a>v下載 Windows 版的 Docker 並安裝，並且在設置處開啟 <code>expose daemon</code>、開啟 <code>kubernetes</code>，<a href="https://kubernetes.io/docs/tasks/tools/install-minikube/" target="_blank" rel="noopener">minikube</a> 自行安裝即可~</p><!-- <img src="docker-setting.png" style="width: 45%;margin: 12px 2% 12px 0;display: inline-block;" /><img src="k8s-setting.png" style="width: 45%;margin: 12px 2% 12px 0;display: inline-block;" /> --><img src="docker-setting.png" class="w-half-imgWrapper" /><img src="k8s-setting.png" class="w-half-imgWrapper" /><p>完成後到 WSL 安裝 <code>docker.io</code>、<code>kubectl</code>，開始搭建服務節點吧🎉🎉</p><pre><code class="bash">$ sudo apt update$ sudo apt install docker.io kubectl$ sudo usermod -aG docker $USER# 增加 Docker 路徑變數$ vim ~/.zshrc...# docker for wslexport DOCKER_HOST=127.0.0.1:2375...# 檢查 Docker 版本$ docker version</code></pre><h2 id="提升效率的小工具"><a href="#提升效率的小工具" class="headerlink" title="提升效率的小工具"></a>提升效率的小工具</h2><ul><li>微軟近年來的轉變與成長(尤其是股價)大家有目共睹，愈來愈重視社群的聲音，但身為一個多年的 Macbook 用戶，還是習慣把 Ctrl 跟 Alt 互換位置，不然一段時間後小妞妞會比檸檬還酸阿😱，用 <a href="https://github.com/randyrants/sharpkeys" target="_blank" rel="noopener">sharpkey</a> 來更改按鍵位置吧</li></ul><p><img src="sharpkey-setting.png" alt="將 Ctrl 與 Alt 互換吧"></p><ul><li><a href="https://github.com/Wox-launcher/Wox" target="_blank" rel="noopener">Wox</a> 是一款模仿 Finder 的工具，用慣 Mac 的朋友可以試試</li></ul><p><img src="Wox-preview.png" alt="用 Ctrl + Space 開啟 Wox，找文件跟算數都可以"></p><ul><li>相對於冰冷冷的文字 <a href="https://getemoji.com/" target="_blank" rel="noopener">Emoji</a> 可以更貼近的表示語言的溫度，在 Windows 輸入時按下 <code>Win + .</code> 就可以選擇囉</li></ul><hr><p>恭喜🎉現在已經有一個可以快樂開發的環境了🎉</p>]]></content>
      
      
      <categories>
          
          <category> 環境建置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Node.js </tag>
            
            <tag> VS Code </tag>
            
            <tag> Python </tag>
            
            <tag> WSL </tag>
            
            <tag> Docker </tag>
            
            <tag> MongoDB Compass </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
